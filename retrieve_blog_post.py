#!/usr/bin/env python3
"""
Retrieve and display blog posts from research sessions in MongoDB.
This script uses the ResearchDatabase class to fetch blog posts
generated by the MiniProcessor.
"""

import argparse
import json
from datetime import datetime
from typing import Dict, Optional

from src.research.database.db import ResearchDatabase
from src.research.exceptions import DatabaseError


def format_blog_post(blog_post: Dict) -> str:
    """Format blog post content for display"""
    output = []
    output.append(f"Title: {blog_post['title']}\n")
    output.append(f"Introduction:\n{blog_post['introduction']}\n")
    
    output.append("Key Sections:")
    for section in blog_post['key_sections']:
        output.append(f"\n  {section['heading']}")
        output.append(f"  Content: {section['content']}")
        output.append("  Key Points:")
        for point in section['key_points']:
            output.append(f"    - {point}")
    
    output.append(f"\nConclusion:\n{blog_post['conclusion']}")
    
    return '\n'.join(output)


def get_blog_post(session_id: str) -> Optional[Dict]:
    """Retrieve blog post from a research session"""
    try:
        db = ResearchDatabase()
        session = db.get_session(session_id)
        
        if not session:
            print(f"Error: Session {session_id} not found")
            return None
            
        blog_post = session.get('blog_post')
        if not blog_post:
            print(f"Session {session_id} exists but has no blog post")
            if session.get('blog_generated') is False:
                print("Blog post has not been generated for this session")
            return None
            
        # Get metadata
        generated_at = session.get('blog_generated_at')
        if generated_at:
            print(f"\nBlog post generated at: {generated_at}")
            
        return blog_post
        
    except DatabaseError as e:
        print(f"Database error: {str(e)}")
        return None
    except Exception as e:
        print(f"Error retrieving blog post: {str(e)}")
        return None


def main():
    parser = argparse.ArgumentParser(description='Retrieve generated blog post from research session')
    parser.add_argument('session_id', help='MongoDB session ID')
    parser.add_argument('--json', action='store_true', help='Output in JSON format')
    parser.add_argument('--output', '-o', help='Save to file instead of printing')
    args = parser.parse_args()

    blog_content = get_blog_post(args.session_id)
    
    if blog_content:
        if args.json:
            output = json.dumps(blog_content, indent=2, ensure_ascii=False)
        else:
            output = format_blog_post(blog_content)
            
        if args.output:
            with open(args.output, 'w', encoding='utf-8') as f:
                f.write(output)
            print(f"Blog post saved to {args.output}")
        else:
            print("\nRetrieved Blog Post:")
            print(output)


if __name__ == "__main__":
    main()